import type { FormData, FormErrors, Step } from '../types';

/**
 * Валидация данных формы
 * 
 * Подумайте:
 * 1. Как организовать правила валидации?
 * 2. Где лучше хранить сообщения об ошибках?
 * 3. Как обеспечить переиспользуемость валидаторов?
 */
export const validateStep = (step: Step, data: FormData): FormErrors => {
  const errors: FormErrors = {};

  /**
   * Изучите:
   * 1. Какие есть подходы к валидации данных?
   * 2. В чем разница между синхронной и асинхронной валидацией?
   * 3. Как работают библиотеки валидации (Yup, Zod)?
   */
  switch (step) {
    case 'personal':
      // Подумайте:
      // 1. Как валидировать email? Какие есть подводные камни?
      // 2. Нужно ли тримить строки перед валидацией?
      // 3. Как обрабатывать разные форматы имён?
      break;

    case 'work':
      // Подумайте:
      // 1. Как валидировать связанные поля?
      // 2. Нужна ли асинхронная валидация?
      // 3. Как обрабатывать числовые значения?
      break;

    case 'additional':
      // Изучите:
      // 1. Как работает валидация необязательных полей?
      // 2. Когда применять условную валидацию?
      break;
  }

  return errors;
};

/**
 * Проверка валидности шага
 * 
 * Подумайте:
 * 1. Как определить, что шаг полностью валиден?
 * 2. Нужно ли кешировать результаты валидации?
 * 3. Как обрабатывать частично заполненные формы?
 */
export const isStepValid = (errors: FormErrors, step: Step): boolean => {
  // Изучите: как работает глубокое сравнение объектов?
  return false;
};
